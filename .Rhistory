# Make containers
object <- matrix(ncol = 3)
result <- matrix(nrow = 1)
# Starting values
i <- 1
# Pull data
while (nrow(result) == 1) {
if (i > 1 & j == 1) {
break
}
# Starting values
j <- 1
while (nrow(result) == 1) {
# Get data from OMDB
result <- title %>%
as.character() %>%
find_by_title(.,
season = i,
episode = j)
# Next season if no more episodes
if (nrow(result) != 1) {
result <- matrix(nrow = 1)
break
}
# Get IMDBRating
result <- result %>% dplyr::select(imdbRating)
# Fill container
object <- rbind(object,
c(i, j, result))
# Next iteration
j <- j + 1
}
print(paste("Last episode of Season", i, "was episode", j - 1))
i <- i + 1
}
# Rename columns
colnames(object) <- c("Season", "Episode", "IMDBRating")
# Necessary transformations to new df
object_clean <- data.frame(suits[2:nrow(object), ])
object_clean$episode.no <- 1:nrow(object_clean)
object_clean$Season <- as.numeric(object$Season) %>% as.factor()
object_clean$Episode <- as.numeric(object$Episode) %>% as.factor()
object_clean$IMDBRating <- as.numeric(object$IMDBRating)
View(object_clean)
as.numeric(object$Season) %>% as.factor()
object$Season
colnames(object) <- c("Season", "Episode", "IMDBRating")
colnames(object)
object$Season
object <- as.data.frame(object)
colnames(object) <- c("Season", "Episode", "IMDBRating")
object$Season
as.numeric(object$Season) %>% as.factor()
# Make DF
object <- data.frame(object[2:nrow(object), ])
# Rename columns
colnames(object) <- c("Season", "Episode", "IMDBRating")
# Necessary transformations to new df
object_clean <- data.frame(object)
object_clean$episode.no <- 1:nrow(object_clean)
object_clean$Season <- as.numeric(object$Season) %>% as.factor()
object_clean$Episode <- as.numeric(object$Episode) %>% as.factor()
object_clean$IMDBRating <- as.numeric(object$IMDBRating)
View(object_clean)
paste0("IMDB Ratings of ", title, " episodes \n")
########### R x OMDB ##############
###### Stanislaus Stadlmann #######
# The motivation of this Script was
# to obtain all ratings on OMDB
# of a certain TV series.
# Install GitHub R Package
# devtools::install_github("hrbrmstr/omdbapi")
# Packages
library(XML)
library(omdbapi)
library(dplyr)
library(ggplot2)
# Do a search of the series/movie
search_results <- search_by_title("Suits", type = "series")
# Specify here which of the results is the right one
title <- search_results[1, 1]
# Make containers
object <- matrix(ncol = 3)
result <- matrix(nrow = 1)
# Starting values
i <- 1
# Pull data
while (nrow(result) == 1) {
if (i > 1 & j == 1) {
break
}
# Starting values
j <- 1
while (nrow(result) == 1) {
# Get data from OMDB
result <- title %>%
as.character() %>%
find_by_title(.,
season = i,
episode = j)
# Next season if no more episodes
if (nrow(result) != 1) {
result <- matrix(nrow = 1)
break
}
# Get IMDBRating
result <- result %>% dplyr::select(imdbRating)
# Fill container
object <- rbind(object,
c(i, j, result))
# Next iteration
j <- j + 1
}
print(paste("Last episode of Season", i, "was episode", j - 1))
i <- i + 1
}
# Make DF
object <- data.frame(object[2:nrow(object), ])
# Rename columns
colnames(object) <- c("Season", "Episode", "IMDBRating")
# Necessary transformations to new df
object_clean <- data.frame(object)
object_clean$episode.no <- 1:nrow(object_clean)
object_clean$Season <- as.numeric(object$Season) %>% as.factor()
object_clean$Episode <- as.numeric(object$Episode) %>% as.factor()
object_clean$IMDBRating <- as.numeric(object$IMDBRating)
# Manual adjustments
# Graph
png(paste0(title,"IMDB.png"),
res = 125,
height = 900,
width = 1600)
ggplot(data = object_clean, aes(x = episode.no,
y = IMDBRating,
col = Season)) +
geom_point() +
stat_smooth(method = "lm") +
ggtitle(paste0("IMDB Ratings of ", title, " episodes \n")) +
theme_bw() +
xlab("Episode No.")
dev.off()
search_results <- search_by_title("The Office", type = "series")
search_results
search_results <- search_by_title("The Office", type = "series")
# Specify here which of the results is the right one
title <- search_results[1, 1]
# Make containers
object <- matrix(ncol = 3)
result <- matrix(nrow = 1)
# Starting values
i <- 1
# Pull data
while (nrow(result) == 1) {
if (i > 1 & j == 1) {
break
}
# Starting values
j <- 1
while (nrow(result) == 1) {
# Get data from OMDB
result <- title %>%
as.character() %>%
find_by_title(.,
season = i,
episode = j)
# Next season if no more episodes
if (nrow(result) != 1) {
result <- matrix(nrow = 1)
break
}
# Get IMDBRating
result <- result %>% dplyr::select(imdbRating)
# Fill container
object <- rbind(object,
c(i, j, result))
# Next iteration
j <- j + 1
}
print(paste("Last episode of Season", i, "was episode", j - 1))
i <- i + 1
}
# Make DF
object <- data.frame(object[2:nrow(object), ])
# Rename columns
colnames(object) <- c("Season", "Episode", "IMDBRating")
# Necessary transformations to new df
object_clean <- data.frame(object)
object_clean$episode.no <- 1:nrow(object_clean)
object_clean$Season <- as.numeric(object$Season) %>% as.factor()
object_clean$Episode <- as.numeric(object$Episode) %>% as.factor()
object_clean$IMDBRating <- as.numeric(object$IMDBRating)
# Manual adjustments
# Graph
png(paste0(title,"IMDB.png"),
res = 125,
height = 900,
width = 1600)
ggplot(data = object_clean, aes(x = episode.no,
y = IMDBRating,
col = Season)) +
geom_point() +
stat_smooth(method = "lm") +
ggtitle(paste0("IMDB Ratings of ", title, " episodes \n")) +
theme_bw() +
xlab("Episode No.")
dev.off()
library(limoaddin)
clockAddin()
"2016-03-10 17:04:43"
?devtools::install_github
devtools::install_github("Stan125/limoaddin")
limoaddin:::clockaddin()
library(limoaddin)
limoaddin:::clockaddin()
devtools::install_github("Stan125/limoaddin")
devtools::install_github("Stan125/limoaddin")
limoaddin:::clockAddin()
source('~/GitHub/limoaddin/R/limoaddin.R')
clockAddin()
source('~/GitHub/limoaddin/R/limoaddin.R')
h2("When is Guillermo a bitch?")
source('~/GitHub/limoaddin/R/limoaddin.R')
source('~/GitHub/limoaddin/R/limoaddin.R')
source('~/GitHub/limoaddin/R/limoaddin.R')
?invalidatePeriodicall
?invalidatePeriodically
invalidatePeriodically()
source('~/GitHub/limoaddin/R/limoaddin.R')
?tag
ui <- miniPage(
gadgetTitleBar("Cute Cat"),
img(src = "http://costumewall.com/wp-content/uploads/2015/09/cute-cat-costumes-30.jpg"),
)
img(src = "http://costumewall.com/wp-content/uploads/2015/09/cute-cat-costumes-30.jpg")
gadgetTitleBar("Cute Cat")
?ui
?miniPage
source('~/GitHub/limoaddin/R/limoaddin.R')
source('~/GitHub/limoaddin/R/limoaddin.R')
source('~/GitHub/limoaddin/R/limoaddin.R')
source('~/GitHub/limoaddin/R/limoaddin.R')
source('~/GitHub/limoaddin/R/limoaddin.R')
source('~/GitHub/limoaddin/R/limoaddin.R')
source('~/GitHub/limoaddin/R/limoaddin.R')
source('~/GitHub/limoaddin/R/limoaddin.R')
sushicat()
devtools::install_github("Stan125/limoaddin")
limoaddin:::sushicat()
limoaddin:::sushicat()
devtools::install_github("Stan125/limoaddin")
search_results <- search_by_title("The Office", type = "series")
########### R x OMDB ##############
###### Stanislaus Stadlmann #######
# The motivation of this Script was
# to obtain all ratings on OMDB
# of a certain TV series.
# Install GitHub R Package
# devtools::install_github("hrbrmstr/omdbapi")
# Packages
library(XML)
library(omdbapi)
library(dplyr)
library(ggplot2)
# Do a search of the series/movie
search_results <- search_by_title("The Office", type = "series")
# Specify here which of the results is the right one
title <- search_results[1, 1]
# Make containers
object <- matrix(ncol = 3)
result <- matrix(nrow = 1)
# Starting values
i <- 1
# Pull data
while (nrow(result) == 1) {
if (i > 1 & j == 1) {
break
}
# Starting values
j <- 1
while (nrow(result) == 1) {
# Get data from OMDB
result <- title %>%
as.character() %>%
find_by_title(.,
season = i,
episode = j)
# Next season if no more episodes
if (nrow(result) != 1) {
result <- matrix(nrow = 1)
break
}
# Get IMDBRating
result <- result %>% dplyr::select(imdbRating)
# Fill container
object <- rbind(object,
c(i, j, result))
# Next iteration
j <- j + 1
}
print(paste("Last episode of Season", i, "was episode", j - 1))
i <- i + 1
}
while (nrow(result) == 1) {
if (i > 1 & j == 1) {
break
}
# Starting values
j <- 1
while (nrow(result) == 1) {
# Get data from OMDB
result <- title %>%
as.character() %>%
find_by_title(.,
season = i,
episode = j)
# Next season if no more episodes
if (nrow(result) != 1) {
result <- matrix(nrow = 1)
break
}
# Get IMDBRating
result <- result %>% dplyr::select(imdbRating)
# Fill container
object <- rbind(object,
c(i, j, result))
# Next iteration
j <- j + 1
}
print(paste("Last episode of Season", i, "was episode", j - 1))
i <- i + 1
}
j <- 1
# Pull data
while (nrow(result) == 1) {
if (i > 1 & j == 1) {
break
}
# Starting values
j <- 1
while (nrow(result) == 1) {
# Get data from OMDB
result <- title %>%
as.character() %>%
find_by_title(.,
season = i,
episode = j)
# Next season if no more episodes
if (nrow(result) != 1) {
result <- matrix(nrow = 1)
break
}
# Get IMDBRating
result <- result %>% dplyr::select(imdbRating)
# Fill container
object <- rbind(object,
c(i, j, result))
# Next iteration
j <- j + 1
}
print(paste("Last episode of Season", i, "was episode", j - 1))
i <- i + 1
}
search_results <- search_by_title("Suits", type = "series")
# Specify here which of the results is the right one
title <- search_results[1, 1]
# Make containers
object <- matrix(ncol = 3)
result <- matrix(nrow = 1)
# Starting values
i <- 1
j <- 1
# Pull data
while (nrow(result) == 1) {
if (i > 1 & j == 1) {
break
}
# Starting values
j <- 1
while (nrow(result) == 1) {
# Get data from OMDB
result <- title %>%
as.character() %>%
find_by_title(.,
season = i,
episode = j)
# Next season if no more episodes
if (nrow(result) != 1) {
result <- matrix(nrow = 1)
break
}
# Get IMDBRating
result <- result %>% dplyr::select(imdbRating)
# Fill container
object <- rbind(object,
c(i, j, result))
# Next iteration
j <- j + 1
}
print(paste("Last episode of Season", i, "was episode", j - 1))
i <- i + 1
}
# Make DF
object <- data.frame(object[2:nrow(object), ])
# Rename columns
colnames(object) <- c("Season", "Episode", "IMDBRating")
# Necessary transformations to new df
object_clean <- data.frame(object)
object_clean$episode.no <- 1:nrow(object_clean)
object_clean$Season <- as.numeric(object$Season) %>% as.factor()
object_clean$Episode <- as.numeric(object$Episode) %>% as.factor()
object_clean$IMDBRating <- as.numeric(object$IMDBRating)
# Manual adjustments
# Graph
png(paste0(title,"IMDB.png"),
res = 125,
height = 900,
width = 1600)
ggplot(data = object_clean, aes(x = episode.no,
y = IMDBRating,
col = Season)) +
geom_point() +
stat_smooth(method = "lm") +
ggtitle(paste0("IMDB Ratings of ", title, " episodes \n")) +
theme_bw() +
xlab("Episode No.")
dev.off()
ggplot(data = object_clean, aes(x = episode.no,
y = IMDBRating,
col = Season)) +
geom_point() +
stat_smooth(method = "lm") +
ggtitle(paste0("IMDB Ratings of ", title, " episodes \n")) +
theme_bw() +
xlab("Episode No.")
View(object_clean)
View(object_clean)
ggplot(data = object_clean, aes(x = episode.no,
y = IMDBRating,
col = Season)) +
geom_point() +
stat_smooth(method = "lm") +
ggtitle(paste0("IMDB Ratings of ", title, " episodes \n")) +
theme_bw() +
xlab("Episode No.")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
source('~/GitHub/Romdb/Romdb.R', echo=TRUE)
limoaddin:::sushicat()
library(rstudioapi)
library(dplyr)
library(shiny)
library(miniUI)
limoaddin:::sushicat()
?readChar
setwd("~/GitHub/flexstat-goe")
resultsURL <- "https://pruefungsverwaltung.uni-goettingen.de/statistikportal/api/queryexecution/results"
# Read both JSON files
requestJSON <- readChar("json/request.json", file.info("json/request.json")$size)
modulesJSON <- readChar("json/modules.json", file.info("json/modules.json")$size)
modulesDataFrame <- fromJSON(modulesJSON)
library(jsonlite)
library(httr)
modulesDataFrame <- fromJSON(modulesJSON)
View(modulesDataFrame)
View(modulesDataFrame)
# Container for records
records <- data.frame(matrix(nrow = 0, ncol = 21))
for (module in modulesDataFrame$value) {
for (semester in 52:62) { # 52 is Winter-semester 2010/11
moduleString <- paste0('"lastValue":"', module, '"')
thisRequestJSON <- sub('"lastValue":"112"', moduleString, requestJSON)
semesterString <- paste0('"lastValue":"', semester, '"')
thisRequestJSON <- sub('"lastValue":"60"', semesterString, thisRequestJSON)
bodyList <- list(data = thisRequestJSON)
request <- POST(resultsURL, body = bodyList, encode = "form")
stop_for_status(request)
responseJSON <- content(request, encoding = "UTF-8", type = "text")
responseDataFrame <- fromJSON(responseJSON)$data$records
if (class(responseDataFrame) == "data.frame") {
thisRecords <- cbind(
modul            = module,
semester         = semester,
termin           = responseDataFrame[, "Klausurtermin"],
pruefer          = responseDataFrame[, "Prüfer"],
anzahl           = responseDataFrame[, "Anzahl"],
bestanden        = responseDataFrame[, "Bestanden"],
nichtBestanden   = responseDataFrame[, "Nicht bestanden"],
schnitt          = responseDataFrame[, "Notenschnitt"],
schnittBestanden = responseDataFrame[, "Notenschnitt (nur Bestanden)"],
"X1_0"           = responseDataFrame[, "1_0"],
"X1_3"           = responseDataFrame[, "1_3"],
"X1_7"           = responseDataFrame[, "1_7"],
"X2_0"           = responseDataFrame[, "2_0"],
"X2_3"           = responseDataFrame[, "2_3"],
"X2_7"           = responseDataFrame[, "2_7"],
"X3_0"           = responseDataFrame[, "3_0"],
"X3_3"           = responseDataFrame[, "3_3"],
"X3_7"           = responseDataFrame[, "3_7"],
"X4_0"           = responseDataFrame[, "4_0"],
"X5_0"           = responseDataFrame[, "5_0"],
ohneNote         = responseDataFrame[, "Ohne Note"]
)
firstNewRow <- nrow(records) + 1
lastNewRow <- nrow(records) + nrow(thisRecords)
records[firstNewRow:lastNewRow,] <- thisRecords
}
}
}
View(records)
